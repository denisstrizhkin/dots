* EMACS config.org

** Package Management

*** Install straight.el
#+BEGIN_SRC emacs-lisp :results none
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*** use-package setup
#+BEGIN_SRC emacs-lisp  :results none
;; Install use-package
(straight-use-package 'use-package)

;; Configure use-package to use straight.el by default
(use-package straight
  :custom (straight-use-package-by-default t))
#+END_SRC

** Visual Experience

*** Theme
#+BEGIN_SRC emacs-lisp
  (defun true-color-p ()
    ;; always true colors
    1) 

  (defun styling/load-theme (frame)
    ;; set theme
    (select-frame frame)
    (modus-themes-load-vivendi))
  
  (use-package modus-themes
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
	  modus-themes-bold-constructs nil
	  modus-themes-region '(bg-only no-extend)
	  modus-themes-org-blocks 'gray-background)

    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (add-hook 'after-make-frame-functions #'styling/load-theme)
    (modus-themes-load-vivendi) ;; OR (modus-themes-load-operandi)
    :bind ("<f5>" . modus-themes-toggle))
#+END_SRC

*** Set utf-8 encoding
#+BEGIN_SRC emacs-lisp :results none
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

*** Set fonts
 #+BEGIN_SRC emacs-lisp :results none
 ;; font size
 (defun styling/set-fonts()
   ;; main font
   (when (member "DejaVu Sans Mono" (font-family-list))
     (set-frame-font "DejaVu Sans Mono" t t))

   ;; emoji font
   (when (member "Noto Emoji" (font-family-list))
     (set-fontset-font t nil "Noto Emoji"))

   ;; japanese font
   (when (member "VL Gothic" (font-family-list))
     (set-fontset-font t 'kana "VL Gothic")
     (set-fontset-font t 'han  "VL Gothic")))

 (add-hook 'after-init-hook 'styling/set-fonts)
 (add-hook 'server-after-make-frame-hook 'styling/set-fonts)

 (use-package emojify
   :hook (after-init . global-emojify-mode))
 #+END_SRC

*** Disable some ui features
#+BEGIN_SRC emacs-lisp :results none
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

*** Enable line numbering during text editing
#+BEGIN_SRC emacs-lisp :results none
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'text-mode-hook 'display-line-numbers-mode)

(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
#+END_SRC

*** Input methods
#+BEGIN_SRC emacs-lisp :results none
(setq default-input-method "russian-computer")
#+END_SRC

*** Line wrapping
#+BEGIN_SRC emacs-lisp :results none
(setq-default fill-column 80)
(setq-default word-wrap t)
#+END_SRC

*** Highlight current line
#+BEGIN_SRC emacs-lisp :results none
(global-hl-line-mode t)
#+END_SRC

*** Scroll conservatively
#+BEGIN_SRC emacs-lisp :results none
(setq scroll-conservatively 100)
#+END_SRC

** Quality Of Life

*** Aliases
 #+BEGIN_SRC emacs-lisp :results none
 (defalias 'yes-or-no-p 'y-or-n-p) ; y or n is enough
 (defalias 'list-buffers 'ibuffer) ; always use ibuffer
 #+END_SRC

*** Indentation
#+BEGIN_SRC emacs-lisp :results none
;; Disable electric-indent mode.
(electric-indent-mode -1)
(add-hook 'after-change-major-mode-hook (lambda() (electric-indent-mode -1)))

(setq-default tab-width 2)
(setq-default standard-indent 2)
(setq-default ident-tabs-mode nil) ; disable tabs

;; Use aggressive indent globally
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'java-mode))
#+END_SRC

*** which-key setup
#+BEGIN_SRC emacs-lisp :results none
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC

** Files

*** Music player
#+BEGIN_SRC emacs-lisp :results none
;(use-package simple-mpc
;  :config
;  (setq simple-mpc-playlist-format "%album% : %title% - %artist%"))

(use-package emms
  :config
  (require 'emms-player-mpd)
  (setq emms-player-mpd-server-name "localhost"
	emms-player-mpd-server-port "6601")
  (setq emms-info-functions '(emms-info-mpd)
	emms-player-list '(emms-player-mpd))
  (emms-player-mpd-connect)

  (require 'emms-volume)
  (setq emms-volume-change-function 'emms-volume-mpd-change)
  (global-set-key (kbd "C-c =") 'emms-volume-mode-plus)
  (global-set-key (kbd "C-c -") 'emms-volume-mode-minus)
  (global-set-key (kbd "C-c p") 'emms-pause)

  (require 'emms-cache)
  (emms-cache 1)
  (emms-cache-set-from-mpd-all)

  (require 'emms-mode-line)
  (emms-mode-line 1)

  (require 'emms-playing-time)
  (emms-playing-time 1)

  (require 'emms-streams))

(defun mpd/update-database()
  (interactive)
  (call-process "mpc" nil nil nil "update")
  (message "MPD database updated!"))
#+END_SRC

*** Display dired dir size
#+BEGIN_SRC emacs-lisp
(defun dired-get-size ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-buffer
      (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
      (message "Size of all marked files: %s"
	       (progn 
		 (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
		 (match-string 1))))))

(define-key dired-mode-map (kbd "?") 'dired-get-size)
#+END_SRC

*** Dired openwith setup
 #+BEGIN_SRC emacs-lisp
 (use-package openwith
   :config
   (setq openwith-associations (list
				(list (openwith-make-extension-regexp
				       '("m4v" "mp4" "MP4" "MTS" "mpg" "mov" "avi" "AVI" "flv" "mkv"))
				      "mpv"
				      '(file))
				(list (openwith-make-extension-regexp
				       '("mp3" "ogg"))
				      "mpv"
				      '(file))
				(list (openwith-make-extension-regexp
				       '("pdf"))
				      "zathura"
				      '(file))
				(list (openwith-make-extension-regexp
				       '("xls" "xlsx"))
				      "libreoffice --calc"
				      '(file))
				(list (openwith-make-extension-regexp
				       '("doc" "docx" "odt"))
				      "libreoffice --writer"
				      '(file))))
   (openwith-mode 1))
 #+END_SRC

*** Files backups
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** Coding

*** sql-mode
#+BEGIN_SRC emacs-lisp :results none
(add-hook 'sql-mode-hook (lambda ()
													 (setq indent-tabs-mode nil)))

(add-hook 'conf-space-mode-hook (lambda()
														(setq indent-tabs-mode nill)))
#+END_SRC

*** lammps-mode setup
#+BEGIN_SRC emacs-lisp :results none
(use-package lammps-mode
  :mode (
	 ("\\.in\\'" . lammps-mode)
	 ("\\.lmp\\'" . lammps-mode)))
#+END_SRC

*** company setup
#+BEGIN_SRC emacs-lisp :results none
(use-package company
  :config
  (global-company-mode t))
#+END_SRC

*** web-dev
#+BEGIN_SRC emacs-lisp :results none
(setq-default css-indent-offset 2)

(use-package emmet-mode
  :config
  (add-hook 'mhtml-mode 'emmet-mode))
#+END_SRC

*** lsp-mode setup
#+BEGIN_SRC emacs-lisp :results none
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	 (go-mode . lsp)
	 (mhtml-mode . lsp)
	 (css-mode . lsp)
	 (yaml-mode . lsp)
	 
	 ;; if you want which-key integration
	 (lsp-mode . lsp-enable-which-key-integration))
  :config
  (setq lsp-completion-enable-additional-text-edit 'lsp)

  :commands lsp)
#+END_SRC

*** java-mode setup
#+BEGIN_SRC emacs-lisp :results none
(show-paren-mode 1)

(add-hook 'java-mode-hook (lambda ()
			    (setq c-basic-offset 2)))

(use-package lsp-java
  :config
  (add-hook 'java-mode-hook 'lsp))
#+END_SRC

*** yaml-mode setup
#+BEGIN_SRC emacs-lisp :results none
(use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC

*** MAGIT
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

** Text editing

*** Spelling
#+BEGIN_SRC emacs-lisp :results none
(use-package ispell
  :config
  (setq ispell-program-name "hunspell")
  (ispell-set-spellchecker-params) ;; ispell initialization, a mandatory call
  (ispell-hunspell-add-multi-dic "en-GB,ru")
  (ispell-change-dictionary "en-GB,ru" t))

(use-package flyspell
  :config
  (add-hook 'latex-mode-hook
	    (lambda () (flyspell-mode 1))))
#+END_SRC

** org-mode setup
#+BEGIN_SRC emacs-lisp results: none
;; Disable anoying org mode code blocks indentation.
(setq org-edit-src-content-indentation 0)

(define-key org-mode-map (kbd "C-c C-'") 'org-edit-src-code)
#+END_SRC
