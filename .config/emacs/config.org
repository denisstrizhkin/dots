
* EMACS config.org
** USEPACKAGE setup
#+BEGIN_SRC emacs-lisp :results none
;; Install straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Install use-package
(straight-use-package 'use-package)

;; Configure use-package to use straight.el by default
(use-package straight
  :custom (straight-use-package-by-default t))
#+END_SRC

** System monitor - symon
#+BEGIN_SRC emacs-lisp :results none
; does not work
#+END_SRC

** WHICH-KEY
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
  )
#+END_SRC

** LAMMPS-MODE
#+BEGIN_SRC emacs-lisp
(use-package lammps-mode
  :mode (
	 ("\\.in\\'" . lammps-mode)
	 ("\\.lmp\\'" . lammps-mode)))
#+END_SRC

** OPENWITH
#+BEGIN_SRC emacs-lisp
(use-package openwith
  :config
  (setq openwith-associations (list
			       (list (openwith-make-extension-regexp
				      '("m4v" "mp4" "MP4" "MTS" "mpg" "mov" "avi" "AVI" "flv"))
				     "mpv"
				     '(file))
			       (list (openwith-make-extension-regexp
				      '("mp3" "ogg"))
				     "mpv"
				     '(file))
			       (list (openwith-make-extension-regexp
				      '("pdf"))
				     "zathura"
				     '(file))
			       (list (openwith-make-extension-regexp
				      '("xls" "xlsx"))
				     "libreoffice --calc"
				     '(file))
			       (list (openwith-make-extension-regexp
				      '("doc" "docx" "odt"))
				     "libreoffice --writer"
				     '(file))))
  (openwith-mode 1))
#+END_SRC

** MAGIT
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

** VTERM
#+BEGIN_SRC emacs-lisp
(use-package vterm)
#+END_SRC

** THEME
#+BEGIN_SRC emacs-lisp
  (defun true-color-p ()
    ;; always true colors
    1) 

  (defun styling/load-theme (frame)
    ;; set theme
    (select-frame frame)
    (modus-themes-load-vivendi))
  
  (use-package modus-themes
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
	  modus-themes-bold-constructs nil
	  modus-themes-region '(bg-only no-extend)
	  modus-themes-org-blocks 'gray-background)

    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (add-hook 'after-make-frame-functions #'styling/load-theme)
    (modus-themes-load-vivendi) ;; OR (modus-themes-load-operandi)
    :bind ("<f5>" . modus-themes-toggle))
#+END_SRC

** CODE HIGHTLIGHTING
#+BEGIN_SRC emacs-lisp :results none
(use-package company
  :config
  (global-company-mode t))

(setq-default css-indent-offset 2)

(show-paren-mode 1)

(add-hook 'java-mode-hook (lambda ()
			    (setq c-basic-offset 2
				  tab-width 2
				  indent-tabs-mode nil)))

(use-package emmet-mode
  :config
  (add-hook 'mhtml-mode 'emmet-mode))

(use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))

(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	 (go-mode . lsp)
	 (mhtml-mode . lsp)
	 (css-mode . lsp)
	 (yaml-mode . lsp)
	 
	 ;; if you want which-key integration
	 (lsp-mode . lsp-enable-which-key-integration))
  :config
  (setq lsp-completion-enable-additional-text-edit 'lsp)

  :commands lsp)

(use-package projectile)
(use-package yasnippet :config (yas-global-mode))
(use-package hydra)
(use-package lsp-ui)
(use-package lsp-java
  :config
  (require 'dap-java)
  (add-hook 'java-mode-hook 'lsp))
(use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
(use-package helm-lsp)
(use-package helm
  :config (helm-mode))
(use-package lsp-treemacs)
#+END_SRC

** FILES BACKUPS
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** DIRED DIR SIZE
#+BEGIN_SRC emacs-lisp
(defun dired-get-size ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-buffer
      (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
      (message "Size of all marked files: %s"
	       (progn 
		 (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
		 (match-string 1))))))

(define-key dired-mode-map (kbd "?") 'dired-get-size)
#+END_SRC

** GLOBAL SETTINGS
#+BEGIN_SRC emacs-lisp :results none
;; Set utf-8 encoding for everthing
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Function for making screenshots of the selected region with scrot.
(global-set-key (kbd "<print>") 'screenshot-selected-region)

(defun screenshot-selected-region ()
		  (interactive)
		  (message "Select a region")
		  (let ((path (concat "~/Pictures/screenshots/"
				      (format-time-string "%Y-%m-%d-%T-screenshot") ".png")))
		    (shell-command (concat "scrot " path " -s -f --quality 100") nil (get-buffer "*Messages*"))
		    (message (concat "Scrennshot saved to " path))))

;; Set default input method.
(setq default-input-method "russian-computer")

;; Disable anoying org mode code blocks indentation.
(setq org-edit-src-content-indentation 0)

;; Disable electric-indent mode.
(electric-indent-mode -1)
(add-hook 'after-change-major-mode-hook (lambda() (electric-indent-mode -1)))

;; Set default wrap column.
(setq-default fill-column 80)

;; Enable global line numbering.
(global-display-line-numbers-mode 1)

;; Some aliases.
(defalias 'yes-or-no-p 'y-or-n-p) ; y or n is enough
(defalias 'list-buffers 'ibuffer) ; always use ibuffer

(use-package pass)
#+END_SRC

** MUSIC
#+BEGIN_SRC emacs-lisp :results none
;(use-package simple-mpc
;  :config
;  (setq simple-mpc-playlist-format "%album% : %title% - %artist%"))

(use-package emms
  :config
  (require 'emms-player-mpd)
  (setq emms-player-mpd-server-name "localhost"
	emms-player-mpd-server-port "6601")
  (setq emms-info-functions '(emms-info-mpd)
	emms-player-list '(emms-player-mpd))
  (emms-player-mpd-connect)

  (require 'emms-volume)
  (setq emms-volume-change-function 'emms-volume-mpd-change)
  (global-set-key (kbd "C-c =") 'emms-volume-mode-plus)
  (global-set-key (kbd "C-c -") 'emms-volume-mode-minus)
  (global-set-key (kbd "C-c p") 'emms-pause)

  (require 'emms-cache)
  (emms-cache 1)
  (emms-cache-set-from-mpd-all)

  (require 'emms-mode-line)
  (emms-mode-line 1)

  (require 'emms-playing-time)
  (emms-playing-time 1)

  (require 'emms-streams))

(defun mpd/update-database()
  (interactive)
  (call-process "mpc" nil nil nil "update")
  (message "MPD database updated!"))
#+END_SRC

** FONTS
#+BEGIN_SRC emacs-lisp :results none
;; font size
(defun styling/set-fonts()
  ;; main font
  (when (member "DejaVu Sans Mono" (font-family-list))
    (set-frame-font "DejaVu Sans Mono" t t))

  ;; emoji font
  (when (member "Noto Emoji" (font-family-list))
    (set-fontset-font t nil "Noto Emoji"))

  ;; japanese font
  (when (member "IPAGothic" (font-family-list))
    (set-fontset-font t 'kana "IPAGothic")
    (set-fontset-font t 'han  "IPAGOthic")))

(add-hook 'after-init-hook 'styling/set-fonts)
(add-hook 'server-after-make-frame-hook 'styling/set-fonts)

(use-package emojify
  :hook (after-init . global-emojify-mode))
#+END_SRC

** LANGTOOL
#+BEGIN_SRC emacs-lisp :results none
(use-package ispell
  :config
  (setq ispell-program-name "hunspell")
  (ispell-set-spellchecker-params) ;; ispell initialization, a mandatory call
  (ispell-hunspell-add-multi-dic "en-GB,ru")
  (ispell-change-dictionary "en-GB,ru" t))

(use-package flyspell
  :config
  (add-hook 'latex-mode-hook
	    (lambda () (flyspell-mode 1))))
#+END_SRC

** AGGRESSIVE INDENT
#+BEGIN_SRC emacs-lisp :results none
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'java-mode))
#+END_SRC

** ORG MODE
#+BEGIN_SRC emacs-lisp results: none
(define-key org-mode-map (kbd "C-c C-'") 'org-edit-src-code)
#+END_SRC
