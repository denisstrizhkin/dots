
* EMACS config.org
** USEPACKAGE setup
#+BEGIN_SRC emacs-lisp :results none
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "~/Desktop/data/melpa/")) ; "https://melpa.org/packages/"
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (unless (package-installed-p 'quelpa)
    (with-temp-buffer
      (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
      (eval-buffer)
      (quelpa-self-upgrade)))
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package)
#+END_SRC

** WHICH-KEY
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
  )
#+END_SRC

** LAMMPS-MODE
#+BEGIN_SRC emacs-lisp
  (use-package lammps-mode
    :ensure t
    :mode (
	   ("\\.in\\'" . lammps-mode)
	   ("\\.lmp\\'" . lammps-mode)
	   )
    )

#+END_SRC

** OPENWITH
#+BEGIN_SRC emacs-lisp
  (use-package openwith
    :ensure t
    :config
    (setq openwith-associations (list
				 (list (openwith-make-extension-regexp
					'("m4v" "mp4" "MP4" "MTS" "mpg" "mov" "avi" "AVI" "flv"))
				       "mpv"
				       '(file))
				 (list (openwith-make-extension-regexp
					'("mp3" "ogg"))
				       "mpv"
				       '(file))
				 (list (openwith-make-extension-regexp
					'("pdf"))
				       "zathura"
				       '(file))
				 (list (openwith-make-extension-regexp
					'("xls" "xlsx"))
				       "libreoffice --calc"
				       '(file))
				 (list (openwith-make-extension-regexp
					'("doc" "docx" "odt"))
				       "libreoffice --writer"
				       '(file))))
    (openwith-mode 1)
    )
#+END_SRC

** MAGIT
#+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t)
#+END_SRC

** VTERM
#+BEGIN_SRC emacs-lisp
    (use-package vterm
      :ensure t)
#+END_SRC

** THEME
#+BEGIN_SRC emacs-lisp
  (defun true-color-p () 1)
  (defun my/load-theme (frame)
    (select-frame frame)
    (load-theme 'spacemacs-dark t))

  (use-package spacemacs-theme
    :defer t
    :init (if (daemonp)
	      (add-hook 'after-make-frame-functions #'my/load-theme)
	    (load-theme 'spacemacs-dark t))
    )
#+END_SRC

** CODE HIGHTLIGHTING
#+BEGIN_SRC emacs-lisp :results none
  (use-package company
    :ensure t
    :config
    (global-company-mode t)
  )

  (setq-default css-indent-offset 2)

  (use-package lsp-mode
    :ensure t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	   (go-mode . lsp)
	   (mhtml-mode . lsp)
	   (css-mode . lsp)
	   ;; if you want which-key integration
	   (lsp-mode . lsp-enable-which-key-integration))

    :commands lsp)
#+END_SRC

** FILES BACKUPS
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+END_SRC

** DIRED DIR SIZE
#+BEGIN_SRC emacs-lisp
  (defun dired-get-size ()
    (interactive)
    (let ((files (dired-get-marked-files)))
      (with-temp-buffer
	(apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
	(message "Size of all marked files: %s"
		 (progn 
		   (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
		   (match-string 1))))))

  (define-key dired-mode-map (kbd "?") 'dired-get-size)
#+END_SRC

** GLOBAL SETTINGS
#+BEGIN_SRC emacs-lisp :results none
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  (substitute-key-definition 'kill-buffer 'kill-buffer-and-window global-map)

(setq default-input-method "russian-computer")
  
  (setq-default fill-column 80)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (global-display-line-numbers-mode 1)

  (defalias 'yes-or-no-p 'y-or-n-p) ; y or n is enough
  (defalias 'list-buffers 'ibuffer) ; always use ibuffer
#+END_SRC

** MUSIC
#+BEGIN_SRC emacs-lisp :results none
    (use-package simple-mpc
      :quelpa (simple-mpc :fetcher github :repo "jorenvo/simple-mpc")
      :ensure t
      :config
      (setq simple-mpc-playlist-format "%album% : %title% - %artist%")
    )
  (defun mpd/update-database()
    (interactive)
    (call-process "mpc" nil nil nil "update")
    (message "MPD database updated!")
  )
#+END_SRC

** FONTS
#+BEGIN_SRC emacs-lisp :results none
					  ; font size
  (set-face-attribute 'default nil :height 110)

  (defun styling/set-fonts()
					  ; main font
    (when (member "Iosevka" (font-family-list))
      (set-frame-font "Iosevka" t t))

					  ; emoji font
    (when (member "Noto Color Emoji" (font-family-list))
      (set-fontset-font t 'emoji "Noto Color Emoji"))

					  ; symbols font
    (when (member "Iosevka" (font-family-list))
      (set-fontset-font t 'symbol "Iosevka"))

					  ; japanese font
    (when (member "IPAGothic" (font-family-list))
      (set-fontset-font t 'kana "IPAGothic"))

					  ; cyrillic font
    (when (member "Iosevka" (font-family-list))
      (set-fontset-font t 'cyrillic "Iosevka"))

    (add-hook 'after-init-hook 'styling/set-fonts)
    (add-hook 'server-after-make-frame-hook 'styling/set-fonts)
#+END_SRC

** LANGTOOL
#+BEGIN_SRC emacs-lisp :results none
  (use-package ispell
  :ensure t
  :config
    (setq ispell-program-name "hunspell")
      (ispell-set-spellchecker-params) ;; ispell initialization, a mandatory call
      (ispell-hunspell-add-multi-dic "en_US,ru_RU")
      (ispell-change-dictionary "en_US,ru_RU" t)
     )

	(use-package flyspell
	  :ensure t
	  :config
	  (add-hook 'latex-mode-hook
		    (lambda () (flyspell-mode 1))))
#+END_SRC
