
* EMACS config.org
** USEPACKAGE setup
#+BEGIN_SRC emacs-lisp :results none
;; Install straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Install use-package
(straight-use-package 'use-package)

;; Configure use-package to use straight.el by default
(use-package straight
  :custom (straight-use-package-by-default t))
#+END_SRC

** EXWM
#+BEGIN_SRC emacs-lisp :results none
;; Disable menu-bar, tool-bar and scroll-bar to increase the usable space.
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
;; Also shrink fringes to 1 pixel.
(fringe-mode 1)

(setq display-time-default-load-average nil)
(display-time-mode t)

(server-start)

(use-package exwm
  :ensure t
  :config
  (require 'exwm-config)
  
  (setq exwm-workspace-number 1)

  ;; Global keybindings can be defined with `exwm-input-global-keys'.
  ;; Here are a few examples:
  (setq exwm-input-global-keys
	`(
          ;; Bind "s-r" to exit char-mode and fullscreen mode.
          ([?\s-r] . exwm-reset)
          ;; Bind "s-w" to switch workspace interactively.
          ([?\s-w] . exwm-workspace-switch)
          ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
			(lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))
          ;; Bind "s-&" to launch applications ('M-&' also works if the output
          ;; buffer does not bother you).
          ([?\s-&] . (lambda (command)
		       (interactive (list (read-shell-command "$ ")))
		       (start-process-shell-command command nil command)))
          ;; Bind "s-<f2>" to "slock", a simple X display locker.
          ([s-f2] . (lambda ()
		      (interactive)
		      (start-process "" nil "/usr/bin/slock")))))

  ;; To add a key binding only available in line-mode, simply define it in
  ;; `exwm-mode-map'.  The following example shortens 'C-c q' to 'C-q'.
  (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

  ;; The following example demonstrates how to use simulation keys to mimic
  ;; the behavior of Emacs.  The value of `exwm-input-simulation-keys` is a
  ;; list of cons cells (SRC . DEST), where SRC is the key sequence you press
  ;; and DEST is what EXWM actually sends to application.  Note that both SRC
  ;; and DEST should be key sequences (vector or string).
  (setq exwm-input-simulation-keys
	'(
          ;; movement
          ([?\C-b] . [left])
          ([?\M-b] . [C-left])
          ([?\C-f] . [right])
          ([?\M-f] . [C-right])
          ([?\C-p] . [up])
          ([?\C-n] . [down])
          ([?\C-a] . [home])
          ([?\C-e] . [end])
          ([?\M-v] . [prior])
          ([?\C-v] . [next])
          ([?\C-d] . [delete])
          ([?\C-k] . [S-end delete])
          ;; cut/paste.
          ([?\C-w] . [?\C-x])
          ([?\M-w] . [?\C-c])
          ([?\C-y] . [?\C-v])
          ;; search
          ([?\C-s] . [?\C-f])))

  (exwm-enable)

  (require 'exwm-systemtray)
  (exwm-systemtray-enable)

  ;; Enable exwm input method. (Does not work in QT apps unfotunatelly.)
  (require 'exwm-xim)
  (exwm-xim-enable)
  (push ?\C-\\ exwm-input-prefix-keys))
#+END_SRC
*** System monitor - symon
#+BEGIN_SRC emacs-lisp :results none
(use-package symon
  :quelpa (symon :fetcher github :repo "ieure/symon")
  :ensure t
  :config
  (symon-mode 1))
#+END_SRC

** WHICH-KEY
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
  )
#+END_SRC

** LAMMPS-MODE
#+BEGIN_SRC emacs-lisp
(use-package lammps-mode
  :ensure t
  :mode (
	 ("\\.in\\'" . lammps-mode)
	 ("\\.lmp\\'" . lammps-mode)))
#+END_SRC

** OPENWITH
#+BEGIN_SRC emacs-lisp
(use-package openwith
  :ensure t
  :config
  (setq openwith-associations (list
			       (list (openwith-make-extension-regexp
				      '("m4v" "mp4" "MP4" "MTS" "mpg" "mov" "avi" "AVI" "flv"))
				     "mpv"
				     '(file))
			       (list (openwith-make-extension-regexp
				      '("mp3" "ogg"))
				     "mpv"
				     '(file))
			       (list (openwith-make-extension-regexp
				      '("pdf"))
				     "zathura"
				     '(file))
			       (list (openwith-make-extension-regexp
				      '("xls" "xlsx"))
				     "libreoffice --calc"
				     '(file))
			       (list (openwith-make-extension-regexp
				      '("doc" "docx" "odt"))
				     "libreoffice --writer"
				     '(file))))
  (openwith-mode 1))
#+END_SRC

** MAGIT
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

** VTERM
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :ensure t)
#+END_SRC

** THEME
#+BEGIN_SRC emacs-lisp
  (defun true-color-p ()
    ;; always true colors
    1) 

  (defun styling/load-theme (frame)
    ;; set theme
    (select-frame frame)
    (modus-themes-load-vivendi))
  
  (use-package modus-themes
    :ensure
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
	  modus-themes-bold-constructs nil
	  modus-themes-region '(bg-only no-extend)
	  modus-themes-org-blocks 'gray-background)

    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (add-hook 'after-make-frame-functions #'styling/load-theme)
    (modus-themes-load-vivendi) ;; OR (modus-themes-load-operandi)
    :bind ("<f5>" . modus-themes-toggle))
#+END_SRC

** CODE HIGHTLIGHTING
#+BEGIN_SRC emacs-lisp :results none
(use-package company
  :ensure t
  :config
  (global-company-mode t))

(setq-default css-indent-offset 2)

(use-package lsp-mode
  :ensure t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	 (go-mode . lsp)
	 (mhtml-mode . lsp)
	 (css-mode . lsp)
	 ;; if you want which-key integration
	 (lsp-mode . lsp-enable-which-key-integration))

  :commands lsp)
#+END_SRC

** FILES BACKUPS
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** DIRED DIR SIZE
#+BEGIN_SRC emacs-lisp
(defun dired-get-size ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-buffer
      (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
      (message "Size of all marked files: %s"
	       (progn 
		 (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
		 (match-string 1))))))

(define-key dired-mode-map (kbd "?") 'dired-get-size)
#+END_SRC

** GLOBAL SETTINGS
#+BEGIN_SRC emacs-lisp :results none
;; Set utf-8 encoding for everthing
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; Set default input method.
(setq default-input-method "russian-computer")

;; Disable anoying org mode code blocks indentation.
(setq org-edit-src-content-indentation 0)

;; Disable electric-indent mode.
(electric-indent-mode -1)
(add-hook 'after-change-major-mode-hook (lambda() (electric-indent-mode -1)))

;; Set default wrap column.
(setq-default fill-column 80)

;; Disable excess ui.
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

;; Enable global line numbering.
(global-display-line-numbers-mode 1)

;; Some aliases.
(defalias 'yes-or-no-p 'y-or-n-p) ; y or n is enough
(defalias 'list-buffers 'ibuffer) ; always use ibuffer
#+END_SRC

** MUSIC
#+BEGIN_SRC emacs-lisp :results none
(use-package simple-mpc
  :ensure t
  :config
  (setq simple-mpc-playlist-format "%album% : %title% - %artist%"))

(defun mpd/update-database()
  (interactive)
  (call-process "mpc" nil nil nil "update")
  (message "MPD database updated!"))
#+END_SRC

** FONTS
#+BEGIN_SRC emacs-lisp :results none
;; font size
(set-face-attribute 'default nil :height 110)

(defun styling/set-fonts()
  ;; main font
  (when (member "Iosevka" (font-family-list))
    (set-frame-font "Iosevka" t t))

  ;; emoji font
  (when (member "Noto Color Emoji" (font-family-list))
    (set-fontset-font t 'emoji "Noto Color Emoji"))

  ;; symbols font
  (when (member "Iosevka" (font-family-list))
    (set-fontset-font t 'symbol "Iosevka"))

  ;; japanese font
  (when (member "IPAGothic" (font-family-list))
    (set-fontset-font t 'kana "IPAGothic")
    (set-fontset-font t 'han  "IPAGOthic"))

  ;; cyrillic font
  (when (member "Iosevka" (font-family-list))
    (set-fontset-font t 'cyrillic "Iosevka")))

(add-hook 'after-init-hook 'styling/set-fonts)
(add-hook 'server-after-make-frame-hook 'styling/set-fonts)
#+END_SRC

** LANGTOOL
#+BEGIN_SRC emacs-lisp :results none
(use-package ispell
  :ensure t
  :config
  (setq ispell-program-name "hunspell")
  (ispell-set-spellchecker-params) ;; ispell initialization, a mandatory call
  (ispell-hunspell-add-multi-dic "en_US,ru_RU")
  (ispell-change-dictionary "en_US,ru_RU" t))

(use-package flyspell
  :ensure t
  :config
  (add-hook 'latex-mode-hook
	    (lambda () (flyspell-mode 1))))
#+END_SRC

** AGGRESSIVE INDENT
#+BEGIN_SRC emacs-lisp :results none
(aggressive-indent-mode 1)

(use-package aggressive-indent
  :ensure t
  :config
  (global-aggressive-indent-mode 1))
#+END_SRC

** ORG MODE
#+BEGIN_SRC emacs-lisp results: none
(define-key org-mode-map (kbd "C-c C-'") 'org-edit-src-code)
#+END_SRC
